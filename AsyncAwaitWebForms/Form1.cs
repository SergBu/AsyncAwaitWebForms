namespace AsyncAwaitWebForms
{
    public partial class Form1 : Form
    {
//async-метод начинает выполняться синхронно, как и любой другой метод.
//Внутри async-метода команда await выполняет асинхронное ожидание по
//своему аргументу.Сначала она проверяет, завершилась ли операция: если
//Введение в асинхронное программирование 21
//да, то метод продолжает выполняться (синхронно). В противном случае
//await приостанавливает async-метод и возвращает незавершенную задачу.
//Когда операция завершится позднее, метод async продолжает выполнение.
//async-метод может рассматриваться как состоящий из нескольких синхронных частей, разделенных командами await.Первая синхронная часть
//выполняется в потоке, который вызвал метод, но где выполняются другие
//синхронные части? Ответ на этот вопрос не прост.
//При выполнении await для задачи (самый распространенный сценарий)
//в момент, когда await решает приостановить метод, сохраняется контекст.
//Это текущий объект SynchronizationContext, если только он не равен 
//null (в этом случае контекстом является текущий объект TaskScheduler). 
//Метод возобновляет выполнение в этом сохраненном контексте.Обычно
//контекстом является UI-контекст(для UI-потока) или контекст пула
//потоков(в большинстве других ситуаций). Если вы пишете приложение
//ASP.NET Classic(до Core), то контекстом также может быть контекст
//запроса ASP.NET.В ASP.NET Core используется контекст пула потоков
//вместо специального контекста запроса.
//Таким образом, в приведенном коде все синхронные части пытаются
//возобновить продолжение в исходном контексте. Если вызвать метод
//DoSomethingAsync из UI-потока, каждая из его синхронных частей будет
//выполняться в этом UI-потоке, но если вызвать его из потока из пула
//потоков, то каждая из синхронных частей будет выполняться в любом
//потоке из пула потоков.

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            MethodAsync();

            label1.Text = "123";
        }

        async Task MethodAsync()
        {
            await Task.Run(() =>
            {
                while (File.Exists("test.txt")) { }
            });

            Close();
        }

        void Method()
        {
            while (File.Exists("test.txt")) { }

            Close();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Random rnd = new Random();
            label1.Text = rnd.Next(100, 999).ToString();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            ProgressBarMethodAsync();

            label1.Text = "1000";
        }

        async Task ProgressBarMethodAsync()
        {
            progressBar1.Value = 0;

            while (progressBar1.Value != 100)
            {
                progressBar1.Value++;
                await Task.Delay(100);
            }         
        }
    }
}
